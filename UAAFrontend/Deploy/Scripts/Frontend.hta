<html>

<!--

//////////////////////////////////////////////////
//
// Script File:
//
//  Frontend.hta
//
//   This script drives the Simple Frontend for ConfigMgr 2012 R2
//
//   Author: Johan Arwidmark	
//   
//   Disclaimer
//   This script is provided "AS IS" without express 
//   or implied warranty of any kind.
//
//////////////////////////////////////////////////

-->

<head>
<title>UAA Information Technology Services</title>

<link href="Style.css" type="text/css" rel="stylesheet">
        
<HTA:APPLICATION ID="oWizard" APPLICATIONNAME="" ICON="Wizard.ico" 
    SCROLL="no" 
    SELECTION="no" 
    INNERBORDER="no" 
    BORDER="normal" 
    SINGLEINSTANCE="no" 
    SYSMENU="yes" 
    MAXIMIZEBUTTON="no" 
    MINIMIZEBUTTON="no" 
    />
</head>

<script language="vbscript" type="text/vbscript" src="ZTIUtility.vbs"></script> 
<script language="vbscript" type="text/vbscript" src="ZTIDataAccess.vbs"></script> 
<script language="vbscript" type="text/vbscript">

    

Sub Window_onload

'on error resume next

	CenterWindow 800,450

	ButtonFinish.disabled = true
	ButtonCancel.disabled = false

    ' Display initial text
    strHTML = ""
    strHTML = strHTML & "<h1>UAA Information Technology Services</h1>"
    strHTML = strHTML & "<p>Gathering hardware information, please wait...</p>"

    document.getElementByID("MyContentArea").innerHTML = strHTML

    ' Process ZTIGather.wsf
    oShell.Run "wscript.exe " & oUtility.ScriptDir & "\ZTIGather.wsf",1,True 	

	oEnvironment.Item("OSDCOMPUTERNAME") = GetOfflineComputername

	' Get a list of OUs from Active Directory
	sOUList = GetOUList
	
	' Get a list of task sequences from ConfigMgr
	sTaskSequenceList = GetTaskSequenceList

	
    ' Display form
	
    strHTML = ""
    strHTML = strHTML & "<h1>UAA Information Technology Services</h1>"
    strHTML = strHTML & "<table cellpadding=5 cellspacing=0 border=0 width=100%>"
    strHTML = strHTML & "<tr>"
    strHTML = strHTML & "<td width=25%>Computer name:</td>"
    strHTML = strHTML & "<td width=75%><input type=text id=sComputerName name=sComputerName size=15 onpropertychange=ValidateComputerName tabindex=1></td>"
    strHTML = strHTML & "</tr>"
    strHTML = strHTML & "<td width=25%>Organizational Unit</td>"
    strHTML = strHTML & "<td width=75%><Select name=ddOUList width=100 tabindex=2></Select>"
    strHTML = strHTML & "</tr>"
	strHTML = strHTML & "<tr>"
    strHTML = strHTML & "<td width=25%>OS Image: </td>"
    strHTML = strHTML & "<td width=75%><Select name=ddTaskSequenceList tabindex=3></Select></td>"
    strHTML = strHTML & "</tr>"
	'strHTML = strHTML & "<tr>"
	'strHTML = strHTML & "<td width=25%>Building/Room - Username: </td>"
	'strHTML = strHTML & "<td width=75%><input type=text id=sNotes name=sNotes size=37 tabindex=4></td>"
	'strHTML = strHTML & "</tr>"
	strHTML = strHTML & "<tr>"
	strHTML = strHTML & "<td colspan=2><p><strong>Note:</strong> If the computer account already exists, it will be moved to the target OU<p></td>"
	strHTML = strHTML & "</tr>"
    strHTML = strHTML & "<tr>"
    strHTML = strHTML & "<td colspan=2><textarea name=txtStdOut  rows=7 cols=70 readonly tabindex=4></textarea></td>"
    strHTML = strHTML & "</tr>"
    strHTML = strHTML & "</table>"

    document.getElementByID("MyContentArea").innerHTML = strHTML
    
    GetFrontendData()

    PrintOut "Serial Number: " & oEnvironment.Item("SERIALNUMBER")
	PrintOut "Make: " & oEnvironment.Item("MAKE")
    PrintOut "Model: " & oEnvironment.Item("MODEL")
	PrintOut "IP Address: " & oEnvironment.Item("IPADDRESS001")
    PrintOut "MAC Address: " & oEnvironment.Item("MACADDRESS001")
    PrintOut "Default Gateway: " & oEnvironment.Item("DEFAULTGATEWAY001")

		
End Sub	

Function GetOfflineComputername()
	On Error Goto 0

	Dim CompName : CompName = ""
	Dim ret, sOldSystem : sOldSystem = ""
	For Each drv In Array("C", "D", "E", "F")
		If ofso.FileExists(drv & ":\windows\system32\config\system") Then
			sOldSystem = drv & ":\windows\system32\config\system"
			Exit For
		End If
	Next
	oLogging.CreateEntry "Mounting Offline registry " & sOldSystem, LogTypeInfo
	ret = oShell.Run ("reg load HKLM\z " & sOldSystem, 0, True)
	If ret = 0 Then
		CompName = oShell.RegRead("HKLM\z\ControlSet001\Services\Tcpip\Parameters\Hostname")
		If CompName <> "" Then
			oLogging.CreateEntry "Found old computername '" & CompName & "'", LogTypeInfo
		Else
			oLogging.CreateEntry "Old computername name could not be found", LogTypeWarning
		End If
	Else
		oLogging.CreateEntry "Could not mount offline registry " & sOldSystem, LogTypeWarning
	End If
	
	oShell.Run "REG UNLOAD HKLM\Z", 0, True  

	GetOfflineComputername = "ANC-" & oEnvironment.Item("SERIALNUMBER")	
	GetOfflineComputername = "ANC-" & (Right(GetOfflineComputername,7))
	  
End Function



Sub CenterWindow( widthX, heightY )
    self.ResizeTo widthX, heightY 
    self.MoveTo (screen.Width - widthX)/2, (screen.Height - heightY)/2
End Sub

Sub GetFrontendData

  	sComputerName.value = oEnvironment.Item("OSDCOMPUTERNAME")
  	
	'Create the OU List
    set oXMLDoc = oUtility.CreateXMLDOMObjectEx("OUList.xml")
    
	'Create a disconnected database to store the OU information
	Const adVarChar = 200
	Const MaxCharacters = 255
	Set dataOUList = CreateObject("ADODB.Recordset")
	dataOUList.Fields.Append "objText", adVarChar, MaxCharacters
	dataOUList.Fields.Append "objValue", adVarChar, MaxCharacters
	dataOUList.Open
	
	for each node in oXMLDoc.documentElement.childNodes
        'Set objOption = Document.createElement("OPTION")
        
        sOUText = node.attributes.getNamedItem("distinguishedName").text
        
        If InStr(sOUText, "Domain Controllers") Then
            ' Do nothing
        Else
        
            sOUText = replace(sOUText,"DC=","")
            sOUText = replace(sOUText,"dc=","")
            sOUText = replace(sOUText,"OU=","")
            sOUText = replace(sOUText,"ou=","")
            'sOUText = replace(sOUText,",",",")
            if Len(sOUText) > 34 then
				sOUTextLen=Len(sOUText)
				sOUText=Left(sOUText,(sOUTextLen-35))
				practiceText = sOUText
					'try and modify the order of the text
						newOUOrder = Split(practiceText,",",-1,1)
						'msgbox ubound(newOUOrder)
						'limit = Ubound(newOUOrder)
						Select Case Ubound(newOUOrder)
							Case 3
								sOUText2 = newOUOrder(3) & "--" & newOUOrder(2) & "--" & newOUOrder(1) & "--" & newOUOrder(0)
							Case 2
								sOUText2 = newOUOrder(2) & "--" & newOUOrder(1) & "--" & newOUOrder(0)
							Case 1
								sOUText2 = newOUOrder(1) & "--" & newOUOrder(0)
							Case 0
								sOUText2 = newOUOrder(0)
						end select
						
						sOUText = sOUText2
			end if
            
			dataOUList.AddNew
			dataOUList("objtext") = sOUText
			dataOUList("objvalue") = node.attributes.getNamedItem("distinguishedName").text
			dataOUList.Update

        End If

    next
	
	dataOUList.Sort = "objtext"
	dataOUList.MoveFirst
	Do
		Set objOption = Document.createElement("OPTION")
		objOption.Text = dataOUList.Fields.Item("objtext")
		objOption.Value = dataOUList.Fields.Item("objvalue")
		ddOUList.Add(objOption)
		dataOUList.MoveNext
	Loop Until dataOUList.EOF
	
	dataOUList.Close
	
'Create the Task Sequence List
	set oXMLDoc = oUtility.CreateXMLDOMObjectEx("TaskSequenceList.xml")
	
	'Create a disconnected database to store the OU information
		Const adVarChar2 = 200
		Const MaxCharacters2 = 255
		Set dataTSList = CreateObject("ADODB.Recordset")
		dataTSList.Fields.Append "objText", adVarChar2, MaxCharacters2
		dataTSList.Fields.Append "objValue", adVarChar2, MaxCharacters2
		dataTSList.Open
	
    for each node in oXMLDoc.documentElement.childNodes
	
        'Set objOption = Document.createElement("OPTION")

		dataTSList.AddNew
		dataTSList("objtext") = node.attributes.getNamedItem("PackageName").text
		dataTSList("objvalue") = node.attributes.getNamedItem("AdvertisementID").text
		dataTSList.Update

	next
	
		dataTSList.Sort = "objText"
		dataTSList.MoveFirst
		
	Do
		Set objOption = Document.createElement("OPTION")
		objOption.Text = dataTSList.Fields.Item("objtext")
		objOption.Value = dataTSList.Fields.Item("objvalue")
		ddTaskSequenceList.Add(objOption)
		dataTSList.MoveNext
	Loop Until dataTSList.EOF
	
	dataTSList.Close
	
End Sub

Sub ButtonFinishClick
    oEnvironment.Item("WizardComplete") = "Y"
    oEnvironment.Item("OSDCOMPUTERNAME") = sComputerName.value
    oEnvironment.Item("MACHINEOBJECTOU") = ddOUList.value
	oEnvironment.Item("SMSTSPreferredAdvertID") = ddTaskSequenceList.value
	'oEnvironment.Item("ADNotes") = sNotes.value

    strHTML = ""
    strHTML = strHTML & "<h1>Simple Frontend for ConfigMgr 2012 R2</h1>"
    strHTML = strHTML & "<span style=width: 95%;>"
    strHTML = strHTML & "<table cellpadding=0 cellspacing=0 border=0>"
    strHTML = strHTML & "<tr>"
    strHTML = strHTML & "<td>Completing the wizard...</td>"
    strHTML = strHTML & "</tr>"
    strHTML = strHTML & "</table>"
    strHTML = strHTML & "</span>"

    document.getElementByID("MyContentArea").innerHTML = strHTML

    ' Move machine to correct OU in AD
	'msgbox oEnvironment.Item("OSDCOMPUTERNAME")
	'msgbox oEnvironment.Item("MACHINEOBJECTOU")
	
    MoveComputerToOU
	
	Self.close
    
End Sub


sub ButtonCancelClick
	If Msgbox("Are you sure you want to cancel?",4,"Cancel wizard?") = vbYES Then
		window.Close
	End If
end sub


Sub PrintOut(strText)
	txtStdOut.value = txtStdOut.value & VbCrLf & strText
End Sub

Function GetOUList

	oLogging.CreateEntry "Getting Organizational Units List", LogTypeInfo

	Dim oService
	Dim oXML
	Dim sGetOUList

	' Create the web service instance

	Set oService = new WebService
	oService.IniFile = oEnvironment.Item("RulesFile")
	oService.SectionName = "GetOUList"


	' Call the web service

	Set oXML = oService.Query

		'Dim dteWait
		'dteWait = DateAdd("s", 30, Now())
		'Do Until (Now() > dteWait)
		'Loop

	If oXML is Nothing then
		oLogging.CreateEntry "GetOUList: Unable to query web service.", LogTypeWarning
		sOUList = ""
	Else
        oXML.loadXML HTMLDecode(oXML.documentElement.Text)
        oXML.save(oUtility.ScriptDir & "\OUList.xml")
	End if

	GetOUList = sGetOUList
	
End Function

Function MoveComputerToOU

    Dim oService
    Dim oXML

    ' Create the web service instance

    Set oService = new WebService
    oService.IniFile = oEnvironment.Item("RulesFile")
    oService.SectionName = "MoveComputerToOU"

    ' Make the web service call

    MoveComputerToOU = false
    Set oXML = oService.Query
    oXML.setProperty "SelectionNamespaces", "xmlns:nsa='http://www.deploymentresearch.com'"

    If oXML is Nothing then
	    oLogging.CreateEntry "Unable to call MoveComputerToOU web service.", LogTypeWarning
    ElseIf UCase(oXML.SelectSingleNode("nsa:boolean").Text) = "TRUE" then
	    MoveComputerToOU = true
    End if

End Function

Function GetTaskSequenceList

	oLogging.CreateEntry "GetTaskSequenceList: Getting Task Sequence List", LogTypeInfo

	Dim oService
	Dim oXML
	Dim sTaskSequenceList

	' Create the web service instance

	Set oService = new WebService
	oService.IniFile = oEnvironment.Item("RulesFile")
	oService.SectionName = "GetTaskSequenceList"


	' Call the web service

	Set oXML = oService.Query


	If oXML is Nothing then
		oLogging.CreateEntry "GetTaskSequenceList: Unable to query web service.", LogTypeWarning
		sTaskSequenceList = ""
	Else
        oXML.loadXML HTMLDecode(oXML.documentElement.Text)
        oXML.save(oUtility.ScriptDir & "\TaskSequenceList.xml")
	End if

	GetTaskSequenceList = sTaskSequenceList
	
End Function

Function ValidateComputerName
	
	If Len(sComputerName.value) > 15 then
		ButtonFinish.disabled = true
	ElseIf sComputerName.value = "" then
		ButtonFinish.disabled = true
	Else 
	    ButtonFinish.disabled = false
    End If
    
 End Function

Function HTMLDecode(byVal encodedstring)

         Dim tmp, i
         tmp = encodedstring
         tmp = Replace( tmp, "&quot;", chr(34) )
         tmp = Replace( tmp, "&lt;"  , chr(60) )
         tmp = Replace( tmp, "&gt;"  , chr(62) )
         tmp = Replace( tmp, "&amp;" , chr(38) )
         tmp = Replace( tmp, "&nbsp;", chr(32) )
         For i = 1 to 255
                 tmp = Replace( tmp, "&#" & i & ";", chr( i ) )
         Next
         HTMLDecode = tmp
End Function

</script>

<body Language="VBScript">
        <!-- Create a 2 x 3 table to place all of our content in. Makes resizing of windows easier -->
        <table cellpadding="0" cellspacing="0" border="0" width="100%">

            <!-- Content Area of Wizard -->
            <tr valign="top">
                <td colspan="2" >
                    <div id="MyContentArea" class="ContentArea" >
                        
                    </div>

				</td>            
            </tr>
            
            <!-- Footer of Wizard -->
            <tr valign="middle"  >
                <td class="CommandArea" id="RightWizardButtons" align="right" colspan="2" >
                    <button accesskey=N type=submit id=buttonFinish onclick=ButtonFinishClick ><U>F</U>inish</button>
                    <button accesskey=C id=buttonCancel onclick=ButtonCancelClick><U>C</U>ancel</button>
                </td>
            </tr>

        </table>
    </body>
</html>

